
Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000bdc  00000c70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000c72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c3  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  000021b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c15  00000000  00000000  00002a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e8  00000000  00000000  00003d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
  8a:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t Press=0;  //counter for pressing time

void APP_init(void){
	
	//Car LED initialization
	LED_init(LED_CAR_PORT,LED_CAR_G_PIN);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_Y_PIN);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_R_PIN);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	
	//Pedestrian LED initialization
	LED_init(LED_PED_PORT,LED_PED_G_PIN);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	LED_init(LED_PED_PORT,LED_PED_Y_PIN);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	LED_init(LED_PED_PORT,LED_PED_R_PIN);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	
	//Button initialization
	BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 0a 02 	call	0x414	; 0x414 <BUTTON_init>
	
	//Timer initialization
	TIMER_init();
  ca:	0e 94 4d 03 	call	0x69a	; 0x69a <TIMER_init>
	
	//Enable Global interrupts & setup rising edge detection for button
	sei();
  ce:	78 94       	sei
	RISING_EDGE_SETUP();
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	08 95       	ret

000000de <APP_start>:
}
void APP_start(void){
  de:	cf 93       	push	r28
	//variable to be used in for loop
	uint8_t i;
	
	//if normal mode or need transition (i.e. car green led or yellow is on)
	if(normalmode || CAR_STATE==0 || CAR_STATE==1){
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  e4:	81 11       	cpse	r24, r1
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <APP_start+0x18>
  e8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <CAR_STATE>
  ec:	99 23       	and	r25, r25
  ee:	19 f0       	breq	.+6      	; 0xf6 <APP_start+0x18>
  f0:	91 30       	cpi	r25, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <APP_start+0x18>
  f4:	f5 c0       	rjmp	.+490    	; 0x2e0 <APP_start+0x202>
		if(!normalmode){
  f6:	81 11       	cpse	r24, r1
  f8:	03 c0       	rjmp	.+6      	; 0x100 <APP_start+0x22>
			CAR_STATE=1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <CAR_STATE>
		}
		//Configuring Pedestrian LEDs
		LED_off(LED_PED_PORT,LED_PED_G_PIN);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	82 e4       	ldi	r24, 0x42	; 66
 104:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	82 e4       	ldi	r24, 0x42	; 66
 10c:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		//LED_off(LED_PED_PORT,LED_PED_R_PIN);
		
		switch(CAR_STATE){
 110:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <CAR_STATE>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	21 f1       	breq	.+72     	; 0x160 <APP_start+0x82>
 118:	20 f0       	brcs	.+8      	; 0x122 <APP_start+0x44>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	09 f4       	brne	.+2      	; 0x120 <APP_start+0x42>
 11e:	b9 c0       	rjmp	.+370    	; 0x292 <APP_start+0x1b4>
 120:	d8 c0       	rjmp	.+432    	; 0x2d2 <APP_start+0x1f4>
			//Case GREEN LED
			case 0:
			LED_on(LED_CAR_PORT,LED_CAR_G_PIN);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>

			
			for(i=0;i<50;i++){
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	09 c0       	rjmp	.+18     	; 0x150 <APP_start+0x72>
				TIMER_delay(68);
 13e:	84 e4       	ldi	r24, 0x44	; 68
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
				if(!normalmode)break;//check if ISR was called
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 14a:	88 23       	and	r24, r24
 14c:	19 f0       	breq	.+6      	; 0x154 <APP_start+0x76>
			LED_on(LED_CAR_PORT,LED_CAR_G_PIN);
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
			LED_off(LED_CAR_PORT,LED_CAR_R_PIN);

			
			for(i=0;i<50;i++){
 14e:	cf 5f       	subi	r28, 0xFF	; 255
 150:	c2 33       	cpi	r28, 0x32	; 50
 152:	a8 f3       	brcs	.-22     	; 0x13e <APP_start+0x60>
				TIMER_delay(68);
				if(!normalmode)break;//check if ISR was called
			}
			CAR_STATE=1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <CAR_STATE>
			Prev_carLED=0;
 15a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Prev_carLED>
			break;
 15e:	20 c1       	rjmp	.+576    	; 0x3a0 <APP_start+0x2c2>
			//Case YELLOW LED
			case 1:
			//if not normalmode then we need to blink both
			
			if(!normalmode){
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 164:	81 11       	cpse	r24, r1
 166:	44 c0       	rjmp	.+136    	; 0x1f0 <APP_start+0x112>
				if(Prev_carLED!=2){
 168:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Prev_carLED>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	c9 f1       	breq	.+114    	; 0x1e2 <APP_start+0x104>
					LED_off(LED_PED_PORT,LED_PED_G_PIN);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
				    LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
				    LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e4       	ldi	r24, 0x41	; 65
 184:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
					LED_off(LED_PED_PORT,LED_PED_R_PIN);
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	82 e4       	ldi	r24, 0x42	; 66
 18c:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
					//blink both yellow leds
					for(i=0;i<5;i++){
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	25 c0       	rjmp	.+74     	; 0x1de <APP_start+0x100>
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	81 e4       	ldi	r24, 0x41	; 65
 198:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
						LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	82 e4       	ldi	r24, 0x42	; 66
 1a0:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
						TIMER_delay(390);
 1a4:	86 e8       	ldi	r24, 0x86	; 134
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
						LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	81 e4       	ldi	r24, 0x41	; 65
 1b0:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
						LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
						TIMER_delay(190);
 1bc:	8e eb       	ldi	r24, 0xBE	; 190
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	81 e4       	ldi	r24, 0x41	; 65
 1c8:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
						LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	82 e4       	ldi	r24, 0x42	; 66
 1d0:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
						TIMER_delay(390);
 1d4:	86 e8       	ldi	r24, 0x86	; 134
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
					LED_off(LED_PED_PORT,LED_PED_G_PIN);
				    LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
				    LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
					LED_off(LED_PED_PORT,LED_PED_R_PIN);
					//blink both yellow leds
					for(i=0;i<5;i++){
 1dc:	cf 5f       	subi	r28, 0xFF	; 255
 1de:	c5 30       	cpi	r28, 0x05	; 5
 1e0:	c8 f2       	brcs	.-78     	; 0x194 <APP_start+0xb6>
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
						LED_on(LED_PED_PORT,LED_PED_Y_PIN);
						TIMER_delay(390);
					}
				}
				Prev_carLED=1;//to go to Ped lights logic
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Prev_carLED>
				CAR_STATE=2;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <CAR_STATE>
 1ee:	35 c0       	rjmp	.+106    	; 0x25a <APP_start+0x17c>
				
				
				}else{
				
	                LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	81 e4       	ldi	r24, 0x41	; 65
 1f4:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
					LED_off(LED_PED_PORT,LED_PED_G_PIN);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
					LED_off(LED_PED_PORT,LED_PED_R_PIN);
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	82 e4       	ldi	r24, 0x42	; 66
 204:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
					LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	81 e4       	ldi	r24, 0x41	; 65
 20c:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
				//blink car yellow led
				for(i=0;i<5;i++){
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	21 c0       	rjmp	.+66     	; 0x256 <APP_start+0x178>

					LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	81 e4       	ldi	r24, 0x41	; 65
 218:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
					TIMER_delay(380);
 21c:	8c e7       	ldi	r24, 0x7C	; 124
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
					LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	81 e4       	ldi	r24, 0x41	; 65
 228:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
					TIMER_delay(180);
 22c:	84 eb       	ldi	r24, 0xB4	; 180
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
					LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
					TIMER_delay(380);
 23c:	8c e7       	ldi	r24, 0x7C	; 124
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
					if(!normalmode){//check if ISR was called
 244:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 248:	81 11       	cpse	r24, r1
 24a:	04 c0       	rjmp	.+8      	; 0x254 <APP_start+0x176>
						Prev_carLED=1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Prev_carLED>
						break;
 252:	03 c0       	rjmp	.+6      	; 0x25a <APP_start+0x17c>
	                LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
					LED_off(LED_PED_PORT,LED_PED_G_PIN);
					LED_off(LED_PED_PORT,LED_PED_R_PIN);
					LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
				//blink car yellow led
				for(i=0;i<5;i++){
 254:	cf 5f       	subi	r28, 0xFF	; 255
 256:	c5 30       	cpi	r28, 0x05	; 5
 258:	e8 f2       	brcs	.-70     	; 0x214 <APP_start+0x136>
						Prev_carLED=1;
						break;
					}
				}
			}
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	81 e4       	ldi	r24, 0x41	; 65
 25e:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
			LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	82 e4       	ldi	r24, 0x42	; 66
 266:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
			//Configure variables for correct switching
			if(Prev_carLED==0){
 26a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Prev_carLED>
 26e:	81 11       	cpse	r24, r1
 270:	07 c0       	rjmp	.+14     	; 0x280 <APP_start+0x1a2>
				CAR_STATE=2;
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <CAR_STATE>
				Prev_carLED=1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Prev_carLED>
 27e:	90 c0       	rjmp	.+288    	; 0x3a0 <APP_start+0x2c2>
				}else if(Prev_carLED==2){
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	09 f0       	breq	.+2      	; 0x286 <APP_start+0x1a8>
 284:	8d c0       	rjmp	.+282    	; 0x3a0 <APP_start+0x2c2>
				CAR_STATE=0;
 286:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <CAR_STATE>
				Prev_carLED=1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Prev_carLED>
 290:	87 c0       	rjmp	.+270    	; 0x3a0 <APP_start+0x2c2>
			}
			break;
			//Case RED LED
			case 2:
			LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	81 e4       	ldi	r24, 0x41	; 65
 29e:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
			LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 2a2:	62 e0       	ldi	r22, 0x02	; 2
 2a4:	81 e4       	ldi	r24, 0x41	; 65
 2a6:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
			for(i=0;i<50;i++){
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <APP_start+0x1e2>
				TIMER_delay(68);
 2ae:	84 e4       	ldi	r24, 0x44	; 68
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
				if(!normalmode)break;
 2b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2ba:	88 23       	and	r24, r24
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <APP_start+0x1e6>
			//Case RED LED
			case 2:
			LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
			LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
			for(i=0;i<50;i++){
 2be:	cf 5f       	subi	r28, 0xFF	; 255
 2c0:	c2 33       	cpi	r28, 0x32	; 50
 2c2:	a8 f3       	brcs	.-22     	; 0x2ae <APP_start+0x1d0>
				TIMER_delay(68);
				if(!normalmode)break;
			}
			Prev_carLED=2;
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Prev_carLED>
			CAR_STATE=1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <CAR_STATE>
			break;
 2d0:	67 c0       	rjmp	.+206    	; 0x3a0 <APP_start+0x2c2>
			default:
			CAR_STATE=2;
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <CAR_STATE>
			Prev_carLED=1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Prev_carLED>
			break;
 2de:	60 c0       	rjmp	.+192    	; 0x3a0 <APP_start+0x2c2>
		}
		
		}else{
		//Configure PED LEDs
		LED_on(LED_PED_PORT,LED_PED_G_PIN);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	82 e4       	ldi	r24, 0x42	; 66
 2e4:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	82 e4       	ldi	r24, 0x42	; 66
 2ec:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_R_PIN);
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	82 e4       	ldi	r24, 0x42	; 66
 2f4:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		
		//Configure CAR LEDs
		LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	81 e4       	ldi	r24, 0x41	; 65
 2fc:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e4       	ldi	r24, 0x41	; 65
 304:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
		TIMER_delay(5000);//5 sec delay
 310:	88 e8       	ldi	r24, 0x88	; 136
 312:	93 e1       	ldi	r25, 0x13	; 19
 314:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
		
		//make sure car red light is off
		LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	81 e4       	ldi	r24, 0x41	; 65
 31c:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		
		//blink both yellow after ped green 
		LED_off(LED_PED_PORT,LED_PED_G_PIN); 
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	82 e4       	ldi	r24, 0x42	; 66
 324:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		for(i=0;i<5;i++){
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	25 c0       	rjmp	.+74     	; 0x376 <APP_start+0x298>
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	81 e4       	ldi	r24, 0x41	; 65
 330:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	82 e4       	ldi	r24, 0x42	; 66
 338:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
			TIMER_delay(390);
 33c:	86 e8       	ldi	r24, 0x86	; 134
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	81 e4       	ldi	r24, 0x41	; 65
 348:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
			LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	82 e4       	ldi	r24, 0x42	; 66
 350:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
			TIMER_delay(190);
 354:	8e eb       	ldi	r24, 0xBE	; 190
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	81 e4       	ldi	r24, 0x41	; 65
 360:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	82 e4       	ldi	r24, 0x42	; 66
 368:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
			TIMER_delay(390);
 36c:	86 e8       	ldi	r24, 0x86	; 134
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_delay>
		//make sure car red light is off
		LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
		
		//blink both yellow after ped green 
		LED_off(LED_PED_PORT,LED_PED_G_PIN); 
		for(i=0;i<5;i++){
 374:	cf 5f       	subi	r28, 0xFF	; 255
 376:	c5 30       	cpi	r28, 0x05	; 5
 378:	c8 f2       	brcs	.-78     	; 0x32c <APP_start+0x24e>
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
			TIMER_delay(390);
		}
		//Turn off yellow LEDs
		LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	81 e4       	ldi	r24, 0x41	; 65
 37e:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	82 e4       	ldi	r24, 0x42	; 66
 386:	0e 94 28 02 	call	0x450	; 0x450 <LED_off>
		//turn on PED red LED
		LED_on(LED_PED_PORT,LED_PED_R_PIN);
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	82 e4       	ldi	r24, 0x42	; 66
 38e:	0e 94 22 02 	call	0x444	; 0x444 <LED_on>
		//reset normalmode
		normalmode=1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		//Configure carLED variables
		CAR_STATE=0;
 398:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <CAR_STATE>
		Prev_carLED=1;
 39c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Prev_carLED>
	}
	
}
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <__vector_1>:

ISR(EXT_INT_0){
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	
	BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&Press);
 3c6:	42 e6       	ldi	r20, 0x62	; 98
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	62 e0       	ldi	r22, 0x02	; 2
 3cc:	84 e4       	ldi	r24, 0x44	; 68
 3ce:	0e 94 10 02 	call	0x420	; 0x420 <BUTTON_read>
	
	if (Press>=50)
 3d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3d6:	82 33       	cpi	r24, 0x32	; 50
 3d8:	30 f0       	brcs	.+12     	; 0x3e6 <__vector_1+0x42>
	{
	   normalmode=1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	   Press=0;
 3e0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <__vector_1+0x4e>
	}
	else if (Press<50)
 3e6:	82 33       	cpi	r24, 0x32	; 50
 3e8:	20 f4       	brcc	.+8      	; 0x3f2 <__vector_1+0x4e>
	{
		 normalmode=0;
 3ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
		 Press=0;
 3ee:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	}
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <BUTTON_init>:
#include "BUTTON.h"

//initialize
ERROR_STATE BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	if (DIO_init(buttonPort,buttonPin,INPUT))
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	0e 94 33 02 	call	0x466	; 0x466 <DIO_init>
 41a:	81 11       	cpse	r24, r1
	{
		return TRUE;
 41c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return FALSE;
	}
}
 41e:	08 95       	ret

00000420 <BUTTON_read>:


// button read
ERROR_STATE BUTTON_read(uint8_t buttonPort,uint8_t buttonPin,uint8_t *value)
{
 420:	fa 01       	movw	r30, r20
	if (READ_BIT(PIND,2))
 422:	82 99       	sbic	0x10, 2	; 16
 424:	05 c0       	rjmp	.+10     	; 0x430 <BUTTON_read+0x10>
	return TRUE;
	}
	
	else
	{
		return FALSE;
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	08 95       	ret
{
	if (READ_BIT(PIND,2))
	{
	while(READ_BIT(PIND,2))
	{
		++*value;
 42a:	80 81       	ld	r24, Z
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	80 83       	st	Z, r24
// button read
ERROR_STATE BUTTON_read(uint8_t buttonPort,uint8_t buttonPin,uint8_t *value)
{
	if (READ_BIT(PIND,2))
	{
	while(READ_BIT(PIND,2))
 430:	82 99       	sbic	0x10, 2	; 16
 432:	fb cf       	rjmp	.-10     	; 0x42a <BUTTON_read+0xa>
	{
		++*value;
	}
	return TRUE;
 434:	81 e0       	ldi	r24, 0x01	; 1
	{
		return FALSE;
	}
	
	
}
 436:	08 95       	ret

00000438 <LED_init>:
#include "LED.h"


ERROR_STATE LED_init(uint8_t ledPort,uint8_t ledPin)
{
	if (DIO_init(ledPort,ledPin,OUTPUT))
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	0e 94 33 02 	call	0x466	; 0x466 <DIO_init>
 43e:	81 11       	cpse	r24, r1
	{
		return TRUE;
 440:	81 e0       	ldi	r24, 0x01	; 1
	else 
	{
		return FALSE;
	}
	
}
 442:	08 95       	ret

00000444 <LED_on>:


ERROR_STATE LED_on(uint8_t ledPort,uint8_t ledPin)
{
	
	if (DIO_write(ledPort,ledPin,HIGH))
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	0e 94 c0 02 	call	0x580	; 0x580 <DIO_write>
 44a:	81 11       	cpse	r24, r1
	{
		return TRUE;
 44c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return FALSE;
	}
}
 44e:	08 95       	ret

00000450 <LED_off>:


ERROR_STATE LED_off(uint8_t ledPort,uint8_t ledPin)
{
	if (DIO_write(ledPort,ledPin,LOW))
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	0e 94 c0 02 	call	0x580	; 0x580 <DIO_write>
 456:	81 11       	cpse	r24, r1
	{
		return TRUE;
 458:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return FALSE;
	}
}
 45a:	08 95       	ret

0000045c <main>:

#include "APPLICATION/APP.h"

int main(void)
{ 
	APP_init();
 45c:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
    while (1) 
    {		
		APP_start();
 460:	0e 94 6f 00 	call	0xde	; 0xde <APP_start>
 464:	fd cf       	rjmp	.-6      	; 0x460 <main+0x4>

00000466 <DIO_init>:
#include "DIO.h"


ERROR_STATE DIO_init    (uint8_t PortNum , uint8_t PinNum , uint8_t Direction) // initialize DIO direction
{
	switch (PortNum) 
 466:	82 34       	cpi	r24, 0x42	; 66
 468:	49 f1       	breq	.+82     	; 0x4bc <DIO_init+0x56>
 46a:	18 f4       	brcc	.+6      	; 0x472 <DIO_init+0xc>
 46c:	81 34       	cpi	r24, 0x41	; 65
 46e:	41 f0       	breq	.+16     	; 0x480 <DIO_init+0x1a>
 470:	7d c0       	rjmp	.+250    	; 0x56c <DIO_init+0x106>
 472:	83 34       	cpi	r24, 0x43	; 67
 474:	09 f4       	brne	.+2      	; 0x478 <DIO_init+0x12>
 476:	40 c0       	rjmp	.+128    	; 0x4f8 <DIO_init+0x92>
 478:	84 34       	cpi	r24, 0x44	; 68
 47a:	09 f4       	brne	.+2      	; 0x47e <DIO_init+0x18>
 47c:	5a c0       	rjmp	.+180    	; 0x532 <DIO_init+0xcc>
 47e:	76 c0       	rjmp	.+236    	; 0x56c <DIO_init+0x106>
	{
		case PORT_A :
		  if (Direction == INPUT)
 480:	41 11       	cpse	r20, r1
 482:	0d c0       	rjmp	.+26     	; 0x49e <DIO_init+0x38>
		  {
			  CLR_BIT (DDRA,PinNum);
 484:	2a b3       	in	r18, 0x1a	; 26
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_init+0x2a>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_init+0x26>
 494:	80 95       	com	r24
 496:	82 23       	and	r24, r18
 498:	8a bb       	out	0x1a, r24	; 26
			  return TRUE;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	08 95       	ret
		  }
		  else if (Direction == OUTPUT)
 49e:	41 30       	cpi	r20, 0x01	; 1
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <DIO_init+0x3e>
 4a2:	66 c0       	rjmp	.+204    	; 0x570 <DIO_init+0x10a>
		  {
			  SET_BIT(DDRA,PinNum);
 4a4:	2a b3       	in	r18, 0x1a	; 26
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_init+0x4a>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_init+0x46>
 4b4:	82 2b       	or	r24, r18
 4b6:	8a bb       	out	0x1a, r24	; 26
			  return TRUE;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	08 95       	ret
			  return FALSE;
		  }
		  
		  
		case PORT_B :
		  if (Direction == INPUT)
 4bc:	41 11       	cpse	r20, r1
 4be:	0d c0       	rjmp	.+26     	; 0x4da <DIO_init+0x74>
		  {
			  CLR_BIT (DDRB,PinNum);
 4c0:	27 b3       	in	r18, 0x17	; 23
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_init+0x66>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_init+0x62>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	87 bb       	out	0x17, r24	; 23
			  return TRUE;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	08 95       	ret

		  }
		  else if (Direction == OUTPUT)
 4da:	41 30       	cpi	r20, 0x01	; 1
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <DIO_init+0x7a>
 4de:	4a c0       	rjmp	.+148    	; 0x574 <DIO_init+0x10e>
		  {
			  SET_BIT(DDRB,PinNum);
 4e0:	27 b3       	in	r18, 0x17	; 23
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_init+0x86>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_init+0x82>
 4f0:	82 2b       	or	r24, r18
 4f2:	87 bb       	out	0x17, r24	; 23
		      return TRUE;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	08 95       	ret
			 return FALSE;
		 }
		  
		  
		case PORT_C :
		  if (Direction == INPUT)
 4f8:	41 11       	cpse	r20, r1
 4fa:	0d c0       	rjmp	.+26     	; 0x516 <DIO_init+0xb0>
		  {
			  CLR_BIT (DDRC,PinNum);
 4fc:	24 b3       	in	r18, 0x14	; 20
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_init+0xa2>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_init+0x9e>
 50c:	80 95       	com	r24
 50e:	82 23       	and	r24, r18
 510:	84 bb       	out	0x14, r24	; 20
			  return TRUE;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	08 95       	ret
		  }
		  else if (Direction == OUTPUT)
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	79 f5       	brne	.+94     	; 0x578 <DIO_init+0x112>
		  {
			  SET_BIT(DDRC,PinNum);
 51a:	24 b3       	in	r18, 0x14	; 20
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_init+0xc0>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_init+0xbc>
 52a:	82 2b       	or	r24, r18
 52c:	84 bb       	out	0x14, r24	; 20
			  return TRUE;
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	08 95       	ret
			  return FALSE;
		  }
		  
		  
		case PORT_D :
		  if (Direction == INPUT)
 532:	41 11       	cpse	r20, r1
 534:	0d c0       	rjmp	.+26     	; 0x550 <DIO_init+0xea>
		  {
			  CLR_BIT (DDRD,PinNum);
 536:	21 b3       	in	r18, 0x11	; 17
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_init+0xdc>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_init+0xd8>
 546:	80 95       	com	r24
 548:	82 23       	and	r24, r18
 54a:	81 bb       	out	0x11, r24	; 17
			  return TRUE;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	08 95       	ret
		  }
		  else if (Direction == OUTPUT)
 550:	41 30       	cpi	r20, 0x01	; 1
 552:	a1 f4       	brne	.+40     	; 0x57c <DIO_init+0x116>
		  {
			  SET_BIT(DDRD,PinNum);
 554:	21 b3       	in	r18, 0x11	; 17
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_init+0xfa>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_init+0xf6>
 564:	82 2b       	or	r24, r18
 566:	81 bb       	out	0x11, r24	; 17
			  return TRUE;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	08 95       	ret
			  return FALSE;
		  }
		  
		
		default:
		  return FALSE;  
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	08 95       	ret
			  SET_BIT(DDRA,PinNum);
			  return TRUE;
		  }
		  else
		  {
			  return FALSE;
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	08 95       	ret
		      return TRUE;

		  }
		 else
		 {
			 return FALSE;
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	08 95       	ret
			  SET_BIT(DDRC,PinNum);
			  return TRUE;
		  }
		  else
		  {
			  return FALSE;
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	08 95       	ret
			  SET_BIT(DDRD,PinNum);
			  return TRUE;
		  }
		  else
		  {
			  return FALSE;
 57c:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
		  return FALSE;  
	}
	
}
 57e:	08 95       	ret

00000580 <DIO_write>:
ERROR_STATE DIO_write   (uint8_t PortNum , uint8_t PinNum , uint8_t Value)     // write data to DIO
{
    switch (PortNum)
 580:	82 34       	cpi	r24, 0x42	; 66
 582:	49 f1       	breq	.+82     	; 0x5d6 <DIO_write+0x56>
 584:	18 f4       	brcc	.+6      	; 0x58c <DIO_write+0xc>
 586:	81 34       	cpi	r24, 0x41	; 65
 588:	41 f0       	breq	.+16     	; 0x59a <DIO_write+0x1a>
 58a:	7d c0       	rjmp	.+250    	; 0x686 <DIO_write+0x106>
 58c:	83 34       	cpi	r24, 0x43	; 67
 58e:	09 f4       	brne	.+2      	; 0x592 <DIO_write+0x12>
 590:	40 c0       	rjmp	.+128    	; 0x612 <DIO_write+0x92>
 592:	84 34       	cpi	r24, 0x44	; 68
 594:	09 f4       	brne	.+2      	; 0x598 <DIO_write+0x18>
 596:	5a c0       	rjmp	.+180    	; 0x64c <DIO_write+0xcc>
 598:	76 c0       	rjmp	.+236    	; 0x686 <DIO_write+0x106>
    {
	  case PORT_A :
	    if (Value == LOW)
 59a:	41 11       	cpse	r20, r1
 59c:	0d c0       	rjmp	.+26     	; 0x5b8 <DIO_write+0x38>
	    {
		    CLR_BIT (PORTA,PinNum);
 59e:	2b b3       	in	r18, 0x1b	; 27
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_write+0x2a>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_write+0x26>
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	8b bb       	out	0x1b, r24	; 27
			return TRUE;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	08 95       	ret
	    }
	    else if (Value == HIGH)
 5b8:	41 30       	cpi	r20, 0x01	; 1
 5ba:	09 f0       	breq	.+2      	; 0x5be <DIO_write+0x3e>
 5bc:	66 c0       	rjmp	.+204    	; 0x68a <DIO_write+0x10a>
	    {
		    SET_BIT(PORTA,PinNum);
 5be:	2b b3       	in	r18, 0x1b	; 27
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_write+0x4a>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_write+0x46>
 5ce:	82 2b       	or	r24, r18
 5d0:	8b bb       	out	0x1b, r24	; 27
			return TRUE;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	08 95       	ret
			return FALSE;
		}
	   
	    
	  case PORT_B :
	    if (Value == LOW)
 5d6:	41 11       	cpse	r20, r1
 5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <DIO_write+0x74>
	    {
		    CLR_BIT (PORTB,PinNum);
 5da:	28 b3       	in	r18, 0x18	; 24
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_write+0x66>
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_write+0x62>
 5ea:	80 95       	com	r24
 5ec:	82 23       	and	r24, r18
 5ee:	88 bb       	out	0x18, r24	; 24
			return TRUE;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	08 95       	ret
	    }
	    else if (Value == HIGH)
 5f4:	41 30       	cpi	r20, 0x01	; 1
 5f6:	09 f0       	breq	.+2      	; 0x5fa <DIO_write+0x7a>
 5f8:	4a c0       	rjmp	.+148    	; 0x68e <DIO_write+0x10e>
	    {
		    SET_BIT(PORTB,PinNum);
 5fa:	28 b3       	in	r18, 0x18	; 24
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_write+0x86>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_write+0x82>
 60a:	82 2b       	or	r24, r18
 60c:	88 bb       	out	0x18, r24	; 24
			return TRUE;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	08 95       	ret
			return FALSE;
		}
	    
	    
	  case PORT_C :
	    if (Value == LOW)
 612:	41 11       	cpse	r20, r1
 614:	0d c0       	rjmp	.+26     	; 0x630 <DIO_write+0xb0>
	    {
		    CLR_BIT (PORTC,PinNum);
 616:	25 b3       	in	r18, 0x15	; 21
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_write+0xa2>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_write+0x9e>
 626:	80 95       	com	r24
 628:	82 23       	and	r24, r18
 62a:	85 bb       	out	0x15, r24	; 21
			return TRUE;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	08 95       	ret
	    }
	    else if (Value == HIGH)
 630:	41 30       	cpi	r20, 0x01	; 1
 632:	79 f5       	brne	.+94     	; 0x692 <DIO_write+0x112>
	    {
		    SET_BIT(PORTC,PinNum);
 634:	25 b3       	in	r18, 0x15	; 21
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_write+0xc0>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_write+0xbc>
 644:	82 2b       	or	r24, r18
 646:	85 bb       	out	0x15, r24	; 21
			return TRUE;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	08 95       	ret
		    return FALSE;
	    }
		
	    
	  case PORT_D :
	    if (Value == LOW)
 64c:	41 11       	cpse	r20, r1
 64e:	0d c0       	rjmp	.+26     	; 0x66a <DIO_write+0xea>
	    {
		    CLR_BIT (PORTD,PinNum);
 650:	22 b3       	in	r18, 0x12	; 18
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_write+0xdc>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	6a 95       	dec	r22
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_write+0xd8>
 660:	80 95       	com	r24
 662:	82 23       	and	r24, r18
 664:	82 bb       	out	0x12, r24	; 18
			return TRUE;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret
	    }
	    else if (Value == HIGH)
 66a:	41 30       	cpi	r20, 0x01	; 1
 66c:	a1 f4       	brne	.+40     	; 0x696 <DIO_write+0x116>
	    {
		    SET_BIT(PORTD,PinNum);
 66e:	22 b3       	in	r18, 0x12	; 18
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_write+0xfa>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_write+0xf6>
 67e:	82 2b       	or	r24, r18
 680:	82 bb       	out	0x12, r24	; 18
			return TRUE;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	08 95       	ret
		    return FALSE;
	    }
		
		
	  default :
		return FALSE;
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	08 95       	ret
		    SET_BIT(PORTA,PinNum);
			return TRUE;
	    }
		else
		{
			return FALSE;
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	08 95       	ret
		    SET_BIT(PORTB,PinNum);
			return TRUE;
	    }
		else
		{
			return FALSE;
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	08 95       	ret
		    SET_BIT(PORTC,PinNum);
			return TRUE;
	    }
	    else
	    {
		    return FALSE;
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	08 95       	ret
		    SET_BIT(PORTD,PinNum);
			return TRUE;
	    }
	    else
	    {
		    return FALSE;
 696:	80 e0       	ldi	r24, 0x00	; 0
		
		
	  default :
		return FALSE;
}
}
 698:	08 95       	ret

0000069a <TIMER_init>:
#include "TIMER.h"

void TIMER_init(){
	
	//normal mode
	TCCR0 = 0x00; 
 69a:	13 be       	out	0x33, r1	; 51
 69c:	08 95       	ret

0000069e <TIMER_delay>:
}
void TIMER_delay(uint16_t millisec){
 69e:	8f 92       	push	r8
 6a0:	9f 92       	push	r9
 6a2:	af 92       	push	r10
 6a4:	bf 92       	push	r11
 6a6:	cf 92       	push	r12
 6a8:	df 92       	push	r13
 6aa:	ef 92       	push	r14
 6ac:	ff 92       	push	r15
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	ec 01       	movw	r28, r24
	//max delay 256 micro second
	
	T_tick = 256.0/1000.0; //ms    T_tick = Presc/FCPU
	TMax_Delay= T_tick * 256; //ms		Tmaxdelay = T_tick * 2^8
	
	if(millisec<TMax_Delay)
 6b4:	bc 01       	movw	r22, r24
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatunsisf>
 6be:	6b 01       	movw	r12, r22
 6c0:	7c 01       	movw	r14, r24
 6c2:	2f e6       	ldi	r18, 0x6F	; 111
 6c4:	32 e1       	ldi	r19, 0x12	; 18
 6c6:	43 e8       	ldi	r20, 0x83	; 131
 6c8:	52 e4       	ldi	r21, 0x42	; 66
 6ca:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__cmpsf2>
 6ce:	88 23       	and	r24, r24
 6d0:	9c f4       	brge	.+38     	; 0x6f8 <TIMER_delay+0x5a>
	     {
		Timer_Initial = (TMax_Delay-millisec)/T_tick;
 6d2:	a7 01       	movw	r20, r14
 6d4:	96 01       	movw	r18, r12
 6d6:	6f e6       	ldi	r22, 0x6F	; 111
 6d8:	72 e1       	ldi	r23, 0x12	; 18
 6da:	83 e8       	ldi	r24, 0x83	; 131
 6dc:	92 e4       	ldi	r25, 0x42	; 66
 6de:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 6e2:	2f e6       	ldi	r18, 0x6F	; 111
 6e4:	32 e1       	ldi	r19, 0x12	; 18
 6e6:	43 e8       	ldi	r20, 0x83	; 131
 6e8:	5e e3       	ldi	r21, 0x3E	; 62
 6ea:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__divsf3>
 6ee:	0e 94 ca 04 	call	0x994	; 0x994 <__fixunssfsi>
		No_Overflows = 1;
 6f2:	c1 e0       	ldi	r28, 0x01	; 1
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
 6f6:	35 c0       	rjmp	.+106    	; 0x762 <TIMER_delay+0xc4>
		
		}
	else if(millisec == (int)TMax_Delay)
 6f8:	c1 34       	cpi	r28, 0x41	; 65
 6fa:	d1 05       	cpc	r29, r1
 6fc:	79 f1       	breq	.+94     	; 0x75c <TIMER_delay+0xbe>
		Timer_Initial=0;
		No_Overflows=1;
		}
	else
		{
		No_Overflows = ceil((double)millisec/TMax_Delay);
 6fe:	2f e6       	ldi	r18, 0x6F	; 111
 700:	32 e1       	ldi	r19, 0x12	; 18
 702:	43 e8       	ldi	r20, 0x83	; 131
 704:	52 e4       	ldi	r21, 0x42	; 66
 706:	c7 01       	movw	r24, r14
 708:	b6 01       	movw	r22, r12
 70a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__divsf3>
 70e:	0e 94 3c 04 	call	0x878	; 0x878 <ceil>
 712:	0e 94 ca 04 	call	0x994	; 0x994 <__fixunssfsi>
 716:	4b 01       	movw	r8, r22
 718:	5c 01       	movw	r10, r24
 71a:	eb 01       	movw	r28, r22
		Timer_Initial = (1<<8) - ((double)millisec/T_tick)/No_Overflows;
 71c:	2f e6       	ldi	r18, 0x6F	; 111
 71e:	32 e1       	ldi	r19, 0x12	; 18
 720:	43 e8       	ldi	r20, 0x83	; 131
 722:	5e e3       	ldi	r21, 0x3E	; 62
 724:	c7 01       	movw	r24, r14
 726:	b6 01       	movw	r22, r12
 728:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__divsf3>
 72c:	6b 01       	movw	r12, r22
 72e:	7c 01       	movw	r14, r24
 730:	b4 01       	movw	r22, r8
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatunsisf>
 73a:	9b 01       	movw	r18, r22
 73c:	ac 01       	movw	r20, r24
 73e:	c7 01       	movw	r24, r14
 740:	b6 01       	movw	r22, r12
 742:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__divsf3>
 746:	9b 01       	movw	r18, r22
 748:	ac 01       	movw	r20, r24
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	80 e8       	ldi	r24, 0x80	; 128
 750:	93 e4       	ldi	r25, 0x43	; 67
 752:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 756:	0e 94 ca 04 	call	0x994	; 0x994 <__fixunssfsi>
 75a:	03 c0       	rjmp	.+6      	; 0x762 <TIMER_delay+0xc4>
		No_Overflows = 1;
		
		}
	else if(millisec == (int)TMax_Delay)
		{
		Timer_Initial=0;
 75c:	60 e0       	ldi	r22, 0x00	; 0
		No_Overflows=1;
 75e:	c1 e0       	ldi	r28, 0x01	; 1
 760:	d0 e0       	ldi	r29, 0x00	; 0
		{
		No_Overflows = ceil((double)millisec/TMax_Delay);
		Timer_Initial = (1<<8) - ((double)millisec/T_tick)/No_Overflows;
		}
		
	TCNT0 = Timer_Initial;
 762:	62 bf       	out	0x32, r22	; 50
	
	 //set 256 prescaler
	TCCR0 |= (1<<2);
 764:	83 b7       	in	r24, 0x33	; 51
 766:	84 60       	ori	r24, 0x04	; 4
 768:	83 bf       	out	0x33, r24	; 51
void TIMER_delay(uint16_t millisec){
	uint16_t No_Overflows,Timer_Initial;
	
	double TMax_Delay,T_tick;
	
	uint32_t OF_count=0;
 76a:	20 e0       	ldi	r18, 0x00	; 0
 76c:	30 e0       	ldi	r19, 0x00	; 0
	TCNT0 = Timer_Initial;
	
	 //set 256 prescaler
	TCCR0 |= (1<<2);
	
	while(OF_count<No_Overflows)
 76e:	08 c0       	rjmp	.+16     	; 0x780 <TIMER_delay+0xe2>
	{
		
		//busy wait
		while(READ_BIT(TIFR,0)==0);
 770:	08 b6       	in	r0, 0x38	; 56
 772:	00 fe       	sbrs	r0, 0
 774:	fd cf       	rjmp	.-6      	; 0x770 <TIMER_delay+0xd2>
		
		//clear overflow flag
		SET_BIT(TIFR,0);
 776:	88 b7       	in	r24, 0x38	; 56
 778:	81 60       	ori	r24, 0x01	; 1
 77a:	88 bf       	out	0x38, r24	; 56
		
		//increment counter
		OF_count++;
 77c:	2f 5f       	subi	r18, 0xFF	; 255
 77e:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT0 = Timer_Initial;
	
	 //set 256 prescaler
	TCCR0 |= (1<<2);
	
	while(OF_count<No_Overflows)
 780:	2c 17       	cp	r18, r28
 782:	3d 07       	cpc	r19, r29
 784:	a8 f3       	brcs	.-22     	; 0x770 <TIMER_delay+0xd2>
		//increment counter
		OF_count++;
	}
	
	//Timer stop
	TCCR0 = 0x00;
 786:	13 be       	out	0x33, r1	; 51
}
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	ff 90       	pop	r15
 78e:	ef 90       	pop	r14
 790:	df 90       	pop	r13
 792:	cf 90       	pop	r12
 794:	bf 90       	pop	r11
 796:	af 90       	pop	r10
 798:	9f 90       	pop	r9
 79a:	8f 90       	pop	r8
 79c:	08 95       	ret

0000079e <__subsf3>:
 79e:	50 58       	subi	r21, 0x80	; 128

000007a0 <__addsf3>:
 7a0:	bb 27       	eor	r27, r27
 7a2:	aa 27       	eor	r26, r26
 7a4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__addsf3x>
 7a8:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_round>
 7ac:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fp_pscA>
 7b0:	38 f0       	brcs	.+14     	; 0x7c0 <__addsf3+0x20>
 7b2:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_pscB>
 7b6:	20 f0       	brcs	.+8      	; 0x7c0 <__addsf3+0x20>
 7b8:	39 f4       	brne	.+14     	; 0x7c8 <__addsf3+0x28>
 7ba:	9f 3f       	cpi	r25, 0xFF	; 255
 7bc:	19 f4       	brne	.+6      	; 0x7c4 <__addsf3+0x24>
 7be:	26 f4       	brtc	.+8      	; 0x7c8 <__addsf3+0x28>
 7c0:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_nan>
 7c4:	0e f4       	brtc	.+2      	; 0x7c8 <__addsf3+0x28>
 7c6:	e0 95       	com	r30
 7c8:	e7 fb       	bst	r30, 7
 7ca:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_inf>

000007ce <__addsf3x>:
 7ce:	e9 2f       	mov	r30, r25
 7d0:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_split3>
 7d4:	58 f3       	brcs	.-42     	; 0x7ac <__addsf3+0xc>
 7d6:	ba 17       	cp	r27, r26
 7d8:	62 07       	cpc	r22, r18
 7da:	73 07       	cpc	r23, r19
 7dc:	84 07       	cpc	r24, r20
 7de:	95 07       	cpc	r25, r21
 7e0:	20 f0       	brcs	.+8      	; 0x7ea <__addsf3x+0x1c>
 7e2:	79 f4       	brne	.+30     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e4:	a6 f5       	brtc	.+104    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7e6:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_zero>
 7ea:	0e f4       	brtc	.+2      	; 0x7ee <__addsf3x+0x20>
 7ec:	e0 95       	com	r30
 7ee:	0b 2e       	mov	r0, r27
 7f0:	ba 2f       	mov	r27, r26
 7f2:	a0 2d       	mov	r26, r0
 7f4:	0b 01       	movw	r0, r22
 7f6:	b9 01       	movw	r22, r18
 7f8:	90 01       	movw	r18, r0
 7fa:	0c 01       	movw	r0, r24
 7fc:	ca 01       	movw	r24, r20
 7fe:	a0 01       	movw	r20, r0
 800:	11 24       	eor	r1, r1
 802:	ff 27       	eor	r31, r31
 804:	59 1b       	sub	r21, r25
 806:	99 f0       	breq	.+38     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 808:	59 3f       	cpi	r21, 0xF9	; 249
 80a:	50 f4       	brcc	.+20     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 80c:	50 3e       	cpi	r21, 0xE0	; 224
 80e:	68 f1       	brcs	.+90     	; 0x86a <__stack+0xb>
 810:	1a 16       	cp	r1, r26
 812:	f0 40       	sbci	r31, 0x00	; 0
 814:	a2 2f       	mov	r26, r18
 816:	23 2f       	mov	r18, r19
 818:	34 2f       	mov	r19, r20
 81a:	44 27       	eor	r20, r20
 81c:	58 5f       	subi	r21, 0xF8	; 248
 81e:	f3 cf       	rjmp	.-26     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 820:	46 95       	lsr	r20
 822:	37 95       	ror	r19
 824:	27 95       	ror	r18
 826:	a7 95       	ror	r26
 828:	f0 40       	sbci	r31, 0x00	; 0
 82a:	53 95       	inc	r21
 82c:	c9 f7       	brne	.-14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 82e:	7e f4       	brtc	.+30     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 830:	1f 16       	cp	r1, r31
 832:	ba 0b       	sbc	r27, r26
 834:	62 0b       	sbc	r22, r18
 836:	73 0b       	sbc	r23, r19
 838:	84 0b       	sbc	r24, r20
 83a:	ba f0       	brmi	.+46     	; 0x86a <__stack+0xb>
 83c:	91 50       	subi	r25, 0x01	; 1
 83e:	a1 f0       	breq	.+40     	; 0x868 <__stack+0x9>
 840:	ff 0f       	add	r31, r31
 842:	bb 1f       	adc	r27, r27
 844:	66 1f       	adc	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	88 1f       	adc	r24, r24
 84a:	c2 f7       	brpl	.-16     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 84c:	0e c0       	rjmp	.+28     	; 0x86a <__stack+0xb>
 84e:	ba 0f       	add	r27, r26
 850:	62 1f       	adc	r22, r18
 852:	73 1f       	adc	r23, r19
 854:	84 1f       	adc	r24, r20
 856:	48 f4       	brcc	.+18     	; 0x86a <__stack+0xb>
 858:	87 95       	ror	r24
 85a:	77 95       	ror	r23
 85c:	67 95       	ror	r22
 85e:	b7 95       	ror	r27
 860:	f7 95       	ror	r31
 862:	9e 3f       	cpi	r25, 0xFE	; 254
 864:	08 f0       	brcs	.+2      	; 0x868 <__stack+0x9>
 866:	b0 cf       	rjmp	.-160    	; 0x7c8 <__addsf3+0x28>
 868:	93 95       	inc	r25
 86a:	88 0f       	add	r24, r24
 86c:	08 f0       	brcs	.+2      	; 0x870 <__stack+0x11>
 86e:	99 27       	eor	r25, r25
 870:	ee 0f       	add	r30, r30
 872:	97 95       	ror	r25
 874:	87 95       	ror	r24
 876:	08 95       	ret

00000878 <ceil>:
 878:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_trunc>
 87c:	90 f0       	brcs	.+36     	; 0x8a2 <ceil+0x2a>
 87e:	9f 37       	cpi	r25, 0x7F	; 127
 880:	48 f4       	brcc	.+18     	; 0x894 <ceil+0x1c>
 882:	91 11       	cpse	r25, r1
 884:	16 f4       	brtc	.+4      	; 0x88a <ceil+0x12>
 886:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_szero>
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	80 e8       	ldi	r24, 0x80	; 128
 890:	9f e3       	ldi	r25, 0x3F	; 63
 892:	08 95       	ret
 894:	26 f0       	brts	.+8      	; 0x89e <ceil+0x26>
 896:	1b 16       	cp	r1, r27
 898:	61 1d       	adc	r22, r1
 89a:	71 1d       	adc	r23, r1
 89c:	81 1d       	adc	r24, r1
 89e:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_mintl>
 8a2:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_mpack>

000008a6 <__cmpsf2>:
 8a6:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_cmp>
 8aa:	08 f4       	brcc	.+2      	; 0x8ae <__cmpsf2+0x8>
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	08 95       	ret

000008b0 <__divsf3>:
 8b0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__divsf3x>
 8b4:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_round>
 8b8:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_pscB>
 8bc:	58 f0       	brcs	.+22     	; 0x8d4 <__divsf3+0x24>
 8be:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fp_pscA>
 8c2:	40 f0       	brcs	.+16     	; 0x8d4 <__divsf3+0x24>
 8c4:	29 f4       	brne	.+10     	; 0x8d0 <__divsf3+0x20>
 8c6:	5f 3f       	cpi	r21, 0xFF	; 255
 8c8:	29 f0       	breq	.+10     	; 0x8d4 <__divsf3+0x24>
 8ca:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_inf>
 8ce:	51 11       	cpse	r21, r1
 8d0:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_szero>
 8d4:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_nan>

000008d8 <__divsf3x>:
 8d8:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_split3>
 8dc:	68 f3       	brcs	.-38     	; 0x8b8 <__divsf3+0x8>

000008de <__divsf3_pse>:
 8de:	99 23       	and	r25, r25
 8e0:	b1 f3       	breq	.-20     	; 0x8ce <__divsf3+0x1e>
 8e2:	55 23       	and	r21, r21
 8e4:	91 f3       	breq	.-28     	; 0x8ca <__divsf3+0x1a>
 8e6:	95 1b       	sub	r25, r21
 8e8:	55 0b       	sbc	r21, r21
 8ea:	bb 27       	eor	r27, r27
 8ec:	aa 27       	eor	r26, r26
 8ee:	62 17       	cp	r22, r18
 8f0:	73 07       	cpc	r23, r19
 8f2:	84 07       	cpc	r24, r20
 8f4:	38 f0       	brcs	.+14     	; 0x904 <__divsf3_pse+0x26>
 8f6:	9f 5f       	subi	r25, 0xFF	; 255
 8f8:	5f 4f       	sbci	r21, 0xFF	; 255
 8fa:	22 0f       	add	r18, r18
 8fc:	33 1f       	adc	r19, r19
 8fe:	44 1f       	adc	r20, r20
 900:	aa 1f       	adc	r26, r26
 902:	a9 f3       	breq	.-22     	; 0x8ee <__divsf3_pse+0x10>
 904:	35 d0       	rcall	.+106    	; 0x970 <__divsf3_pse+0x92>
 906:	0e 2e       	mov	r0, r30
 908:	3a f0       	brmi	.+14     	; 0x918 <__divsf3_pse+0x3a>
 90a:	e0 e8       	ldi	r30, 0x80	; 128
 90c:	32 d0       	rcall	.+100    	; 0x972 <__divsf3_pse+0x94>
 90e:	91 50       	subi	r25, 0x01	; 1
 910:	50 40       	sbci	r21, 0x00	; 0
 912:	e6 95       	lsr	r30
 914:	00 1c       	adc	r0, r0
 916:	ca f7       	brpl	.-14     	; 0x90a <__divsf3_pse+0x2c>
 918:	2b d0       	rcall	.+86     	; 0x970 <__divsf3_pse+0x92>
 91a:	fe 2f       	mov	r31, r30
 91c:	29 d0       	rcall	.+82     	; 0x970 <__divsf3_pse+0x92>
 91e:	66 0f       	add	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	bb 1f       	adc	r27, r27
 926:	26 17       	cp	r18, r22
 928:	37 07       	cpc	r19, r23
 92a:	48 07       	cpc	r20, r24
 92c:	ab 07       	cpc	r26, r27
 92e:	b0 e8       	ldi	r27, 0x80	; 128
 930:	09 f0       	breq	.+2      	; 0x934 <__divsf3_pse+0x56>
 932:	bb 0b       	sbc	r27, r27
 934:	80 2d       	mov	r24, r0
 936:	bf 01       	movw	r22, r30
 938:	ff 27       	eor	r31, r31
 93a:	93 58       	subi	r25, 0x83	; 131
 93c:	5f 4f       	sbci	r21, 0xFF	; 255
 93e:	3a f0       	brmi	.+14     	; 0x94e <__divsf3_pse+0x70>
 940:	9e 3f       	cpi	r25, 0xFE	; 254
 942:	51 05       	cpc	r21, r1
 944:	78 f0       	brcs	.+30     	; 0x964 <__divsf3_pse+0x86>
 946:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_inf>
 94a:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_szero>
 94e:	5f 3f       	cpi	r21, 0xFF	; 255
 950:	e4 f3       	brlt	.-8      	; 0x94a <__divsf3_pse+0x6c>
 952:	98 3e       	cpi	r25, 0xE8	; 232
 954:	d4 f3       	brlt	.-12     	; 0x94a <__divsf3_pse+0x6c>
 956:	86 95       	lsr	r24
 958:	77 95       	ror	r23
 95a:	67 95       	ror	r22
 95c:	b7 95       	ror	r27
 95e:	f7 95       	ror	r31
 960:	9f 5f       	subi	r25, 0xFF	; 255
 962:	c9 f7       	brne	.-14     	; 0x956 <__divsf3_pse+0x78>
 964:	88 0f       	add	r24, r24
 966:	91 1d       	adc	r25, r1
 968:	96 95       	lsr	r25
 96a:	87 95       	ror	r24
 96c:	97 f9       	bld	r25, 7
 96e:	08 95       	ret
 970:	e1 e0       	ldi	r30, 0x01	; 1
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	bb 1f       	adc	r27, r27
 97a:	62 17       	cp	r22, r18
 97c:	73 07       	cpc	r23, r19
 97e:	84 07       	cpc	r24, r20
 980:	ba 07       	cpc	r27, r26
 982:	20 f0       	brcs	.+8      	; 0x98c <__divsf3_pse+0xae>
 984:	62 1b       	sub	r22, r18
 986:	73 0b       	sbc	r23, r19
 988:	84 0b       	sbc	r24, r20
 98a:	ba 0b       	sbc	r27, r26
 98c:	ee 1f       	adc	r30, r30
 98e:	88 f7       	brcc	.-30     	; 0x972 <__divsf3_pse+0x94>
 990:	e0 95       	com	r30
 992:	08 95       	ret

00000994 <__fixunssfsi>:
 994:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_splitA>
 998:	88 f0       	brcs	.+34     	; 0x9bc <__fixunssfsi+0x28>
 99a:	9f 57       	subi	r25, 0x7F	; 127
 99c:	98 f0       	brcs	.+38     	; 0x9c4 <__fixunssfsi+0x30>
 99e:	b9 2f       	mov	r27, r25
 9a0:	99 27       	eor	r25, r25
 9a2:	b7 51       	subi	r27, 0x17	; 23
 9a4:	b0 f0       	brcs	.+44     	; 0x9d2 <__fixunssfsi+0x3e>
 9a6:	e1 f0       	breq	.+56     	; 0x9e0 <__fixunssfsi+0x4c>
 9a8:	66 0f       	add	r22, r22
 9aa:	77 1f       	adc	r23, r23
 9ac:	88 1f       	adc	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	1a f0       	brmi	.+6      	; 0x9b8 <__fixunssfsi+0x24>
 9b2:	ba 95       	dec	r27
 9b4:	c9 f7       	brne	.-14     	; 0x9a8 <__fixunssfsi+0x14>
 9b6:	14 c0       	rjmp	.+40     	; 0x9e0 <__fixunssfsi+0x4c>
 9b8:	b1 30       	cpi	r27, 0x01	; 1
 9ba:	91 f0       	breq	.+36     	; 0x9e0 <__fixunssfsi+0x4c>
 9bc:	0e 94 e5 05 	call	0xbca	; 0xbca <__fp_zero>
 9c0:	b1 e0       	ldi	r27, 0x01	; 1
 9c2:	08 95       	ret
 9c4:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_zero>
 9c8:	67 2f       	mov	r22, r23
 9ca:	78 2f       	mov	r23, r24
 9cc:	88 27       	eor	r24, r24
 9ce:	b8 5f       	subi	r27, 0xF8	; 248
 9d0:	39 f0       	breq	.+14     	; 0x9e0 <__fixunssfsi+0x4c>
 9d2:	b9 3f       	cpi	r27, 0xF9	; 249
 9d4:	cc f3       	brlt	.-14     	; 0x9c8 <__fixunssfsi+0x34>
 9d6:	86 95       	lsr	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	b3 95       	inc	r27
 9de:	d9 f7       	brne	.-10     	; 0x9d6 <__fixunssfsi+0x42>
 9e0:	3e f4       	brtc	.+14     	; 0x9f0 <__fixunssfsi+0x5c>
 9e2:	90 95       	com	r25
 9e4:	80 95       	com	r24
 9e6:	70 95       	com	r23
 9e8:	61 95       	neg	r22
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	8f 4f       	sbci	r24, 0xFF	; 255
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	08 95       	ret

000009f2 <__floatunsisf>:
 9f2:	e8 94       	clt
 9f4:	09 c0       	rjmp	.+18     	; 0xa08 <__floatsisf+0x12>

000009f6 <__floatsisf>:
 9f6:	97 fb       	bst	r25, 7
 9f8:	3e f4       	brtc	.+14     	; 0xa08 <__floatsisf+0x12>
 9fa:	90 95       	com	r25
 9fc:	80 95       	com	r24
 9fe:	70 95       	com	r23
 a00:	61 95       	neg	r22
 a02:	7f 4f       	sbci	r23, 0xFF	; 255
 a04:	8f 4f       	sbci	r24, 0xFF	; 255
 a06:	9f 4f       	sbci	r25, 0xFF	; 255
 a08:	99 23       	and	r25, r25
 a0a:	a9 f0       	breq	.+42     	; 0xa36 <__floatsisf+0x40>
 a0c:	f9 2f       	mov	r31, r25
 a0e:	96 e9       	ldi	r25, 0x96	; 150
 a10:	bb 27       	eor	r27, r27
 a12:	93 95       	inc	r25
 a14:	f6 95       	lsr	r31
 a16:	87 95       	ror	r24
 a18:	77 95       	ror	r23
 a1a:	67 95       	ror	r22
 a1c:	b7 95       	ror	r27
 a1e:	f1 11       	cpse	r31, r1
 a20:	f8 cf       	rjmp	.-16     	; 0xa12 <__floatsisf+0x1c>
 a22:	fa f4       	brpl	.+62     	; 0xa62 <__floatsisf+0x6c>
 a24:	bb 0f       	add	r27, r27
 a26:	11 f4       	brne	.+4      	; 0xa2c <__floatsisf+0x36>
 a28:	60 ff       	sbrs	r22, 0
 a2a:	1b c0       	rjmp	.+54     	; 0xa62 <__floatsisf+0x6c>
 a2c:	6f 5f       	subi	r22, 0xFF	; 255
 a2e:	7f 4f       	sbci	r23, 0xFF	; 255
 a30:	8f 4f       	sbci	r24, 0xFF	; 255
 a32:	9f 4f       	sbci	r25, 0xFF	; 255
 a34:	16 c0       	rjmp	.+44     	; 0xa62 <__floatsisf+0x6c>
 a36:	88 23       	and	r24, r24
 a38:	11 f0       	breq	.+4      	; 0xa3e <__floatsisf+0x48>
 a3a:	96 e9       	ldi	r25, 0x96	; 150
 a3c:	11 c0       	rjmp	.+34     	; 0xa60 <__floatsisf+0x6a>
 a3e:	77 23       	and	r23, r23
 a40:	21 f0       	breq	.+8      	; 0xa4a <__floatsisf+0x54>
 a42:	9e e8       	ldi	r25, 0x8E	; 142
 a44:	87 2f       	mov	r24, r23
 a46:	76 2f       	mov	r23, r22
 a48:	05 c0       	rjmp	.+10     	; 0xa54 <__floatsisf+0x5e>
 a4a:	66 23       	and	r22, r22
 a4c:	71 f0       	breq	.+28     	; 0xa6a <__floatsisf+0x74>
 a4e:	96 e8       	ldi	r25, 0x86	; 134
 a50:	86 2f       	mov	r24, r22
 a52:	70 e0       	ldi	r23, 0x00	; 0
 a54:	60 e0       	ldi	r22, 0x00	; 0
 a56:	2a f0       	brmi	.+10     	; 0xa62 <__floatsisf+0x6c>
 a58:	9a 95       	dec	r25
 a5a:	66 0f       	add	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	da f7       	brpl	.-10     	; 0xa58 <__floatsisf+0x62>
 a62:	88 0f       	add	r24, r24
 a64:	96 95       	lsr	r25
 a66:	87 95       	ror	r24
 a68:	97 f9       	bld	r25, 7
 a6a:	08 95       	ret

00000a6c <__fp_cmp>:
 a6c:	99 0f       	add	r25, r25
 a6e:	00 08       	sbc	r0, r0
 a70:	55 0f       	add	r21, r21
 a72:	aa 0b       	sbc	r26, r26
 a74:	e0 e8       	ldi	r30, 0x80	; 128
 a76:	fe ef       	ldi	r31, 0xFE	; 254
 a78:	16 16       	cp	r1, r22
 a7a:	17 06       	cpc	r1, r23
 a7c:	e8 07       	cpc	r30, r24
 a7e:	f9 07       	cpc	r31, r25
 a80:	c0 f0       	brcs	.+48     	; 0xab2 <__fp_cmp+0x46>
 a82:	12 16       	cp	r1, r18
 a84:	13 06       	cpc	r1, r19
 a86:	e4 07       	cpc	r30, r20
 a88:	f5 07       	cpc	r31, r21
 a8a:	98 f0       	brcs	.+38     	; 0xab2 <__fp_cmp+0x46>
 a8c:	62 1b       	sub	r22, r18
 a8e:	73 0b       	sbc	r23, r19
 a90:	84 0b       	sbc	r24, r20
 a92:	95 0b       	sbc	r25, r21
 a94:	39 f4       	brne	.+14     	; 0xaa4 <__fp_cmp+0x38>
 a96:	0a 26       	eor	r0, r26
 a98:	61 f0       	breq	.+24     	; 0xab2 <__fp_cmp+0x46>
 a9a:	23 2b       	or	r18, r19
 a9c:	24 2b       	or	r18, r20
 a9e:	25 2b       	or	r18, r21
 aa0:	21 f4       	brne	.+8      	; 0xaaa <__fp_cmp+0x3e>
 aa2:	08 95       	ret
 aa4:	0a 26       	eor	r0, r26
 aa6:	09 f4       	brne	.+2      	; 0xaaa <__fp_cmp+0x3e>
 aa8:	a1 40       	sbci	r26, 0x01	; 1
 aaa:	a6 95       	lsr	r26
 aac:	8f ef       	ldi	r24, 0xFF	; 255
 aae:	81 1d       	adc	r24, r1
 ab0:	81 1d       	adc	r24, r1
 ab2:	08 95       	ret

00000ab4 <__fp_inf>:
 ab4:	97 f9       	bld	r25, 7
 ab6:	9f 67       	ori	r25, 0x7F	; 127
 ab8:	80 e8       	ldi	r24, 0x80	; 128
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	60 e0       	ldi	r22, 0x00	; 0
 abe:	08 95       	ret

00000ac0 <__fp_mintl>:
 ac0:	88 23       	and	r24, r24
 ac2:	71 f4       	brne	.+28     	; 0xae0 <__fp_mintl+0x20>
 ac4:	77 23       	and	r23, r23
 ac6:	21 f0       	breq	.+8      	; 0xad0 <__fp_mintl+0x10>
 ac8:	98 50       	subi	r25, 0x08	; 8
 aca:	87 2b       	or	r24, r23
 acc:	76 2f       	mov	r23, r22
 ace:	07 c0       	rjmp	.+14     	; 0xade <__fp_mintl+0x1e>
 ad0:	66 23       	and	r22, r22
 ad2:	11 f4       	brne	.+4      	; 0xad8 <__fp_mintl+0x18>
 ad4:	99 27       	eor	r25, r25
 ad6:	0d c0       	rjmp	.+26     	; 0xaf2 <__fp_mintl+0x32>
 ad8:	90 51       	subi	r25, 0x10	; 16
 ada:	86 2b       	or	r24, r22
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	2a f0       	brmi	.+10     	; 0xaec <__fp_mintl+0x2c>
 ae2:	9a 95       	dec	r25
 ae4:	66 0f       	add	r22, r22
 ae6:	77 1f       	adc	r23, r23
 ae8:	88 1f       	adc	r24, r24
 aea:	da f7       	brpl	.-10     	; 0xae2 <__fp_mintl+0x22>
 aec:	88 0f       	add	r24, r24
 aee:	96 95       	lsr	r25
 af0:	87 95       	ror	r24
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__fp_mpack>:
 af6:	9f 3f       	cpi	r25, 0xFF	; 255
 af8:	31 f0       	breq	.+12     	; 0xb06 <__fp_mpack_finite+0xc>

00000afa <__fp_mpack_finite>:
 afa:	91 50       	subi	r25, 0x01	; 1
 afc:	20 f4       	brcc	.+8      	; 0xb06 <__fp_mpack_finite+0xc>
 afe:	87 95       	ror	r24
 b00:	77 95       	ror	r23
 b02:	67 95       	ror	r22
 b04:	b7 95       	ror	r27
 b06:	88 0f       	add	r24, r24
 b08:	91 1d       	adc	r25, r1
 b0a:	96 95       	lsr	r25
 b0c:	87 95       	ror	r24
 b0e:	97 f9       	bld	r25, 7
 b10:	08 95       	ret

00000b12 <__fp_nan>:
 b12:	9f ef       	ldi	r25, 0xFF	; 255
 b14:	80 ec       	ldi	r24, 0xC0	; 192
 b16:	08 95       	ret

00000b18 <__fp_pscA>:
 b18:	00 24       	eor	r0, r0
 b1a:	0a 94       	dec	r0
 b1c:	16 16       	cp	r1, r22
 b1e:	17 06       	cpc	r1, r23
 b20:	18 06       	cpc	r1, r24
 b22:	09 06       	cpc	r0, r25
 b24:	08 95       	ret

00000b26 <__fp_pscB>:
 b26:	00 24       	eor	r0, r0
 b28:	0a 94       	dec	r0
 b2a:	12 16       	cp	r1, r18
 b2c:	13 06       	cpc	r1, r19
 b2e:	14 06       	cpc	r1, r20
 b30:	05 06       	cpc	r0, r21
 b32:	08 95       	ret

00000b34 <__fp_round>:
 b34:	09 2e       	mov	r0, r25
 b36:	03 94       	inc	r0
 b38:	00 0c       	add	r0, r0
 b3a:	11 f4       	brne	.+4      	; 0xb40 <__fp_round+0xc>
 b3c:	88 23       	and	r24, r24
 b3e:	52 f0       	brmi	.+20     	; 0xb54 <__fp_round+0x20>
 b40:	bb 0f       	add	r27, r27
 b42:	40 f4       	brcc	.+16     	; 0xb54 <__fp_round+0x20>
 b44:	bf 2b       	or	r27, r31
 b46:	11 f4       	brne	.+4      	; 0xb4c <__fp_round+0x18>
 b48:	60 ff       	sbrs	r22, 0
 b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__fp_round+0x20>
 b4c:	6f 5f       	subi	r22, 0xFF	; 255
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	08 95       	ret

00000b56 <__fp_split3>:
 b56:	57 fd       	sbrc	r21, 7
 b58:	90 58       	subi	r25, 0x80	; 128
 b5a:	44 0f       	add	r20, r20
 b5c:	55 1f       	adc	r21, r21
 b5e:	59 f0       	breq	.+22     	; 0xb76 <__fp_splitA+0x10>
 b60:	5f 3f       	cpi	r21, 0xFF	; 255
 b62:	71 f0       	breq	.+28     	; 0xb80 <__fp_splitA+0x1a>
 b64:	47 95       	ror	r20

00000b66 <__fp_splitA>:
 b66:	88 0f       	add	r24, r24
 b68:	97 fb       	bst	r25, 7
 b6a:	99 1f       	adc	r25, r25
 b6c:	61 f0       	breq	.+24     	; 0xb86 <__fp_splitA+0x20>
 b6e:	9f 3f       	cpi	r25, 0xFF	; 255
 b70:	79 f0       	breq	.+30     	; 0xb90 <__fp_splitA+0x2a>
 b72:	87 95       	ror	r24
 b74:	08 95       	ret
 b76:	12 16       	cp	r1, r18
 b78:	13 06       	cpc	r1, r19
 b7a:	14 06       	cpc	r1, r20
 b7c:	55 1f       	adc	r21, r21
 b7e:	f2 cf       	rjmp	.-28     	; 0xb64 <__fp_split3+0xe>
 b80:	46 95       	lsr	r20
 b82:	f1 df       	rcall	.-30     	; 0xb66 <__fp_splitA>
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <__fp_splitA+0x30>
 b86:	16 16       	cp	r1, r22
 b88:	17 06       	cpc	r1, r23
 b8a:	18 06       	cpc	r1, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	f1 cf       	rjmp	.-30     	; 0xb72 <__fp_splitA+0xc>
 b90:	86 95       	lsr	r24
 b92:	71 05       	cpc	r23, r1
 b94:	61 05       	cpc	r22, r1
 b96:	08 94       	sec
 b98:	08 95       	ret

00000b9a <__fp_trunc>:
 b9a:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_splitA>
 b9e:	a0 f0       	brcs	.+40     	; 0xbc8 <__fp_trunc+0x2e>
 ba0:	be e7       	ldi	r27, 0x7E	; 126
 ba2:	b9 17       	cp	r27, r25
 ba4:	88 f4       	brcc	.+34     	; 0xbc8 <__fp_trunc+0x2e>
 ba6:	bb 27       	eor	r27, r27
 ba8:	9f 38       	cpi	r25, 0x8F	; 143
 baa:	60 f4       	brcc	.+24     	; 0xbc4 <__fp_trunc+0x2a>
 bac:	16 16       	cp	r1, r22
 bae:	b1 1d       	adc	r27, r1
 bb0:	67 2f       	mov	r22, r23
 bb2:	78 2f       	mov	r23, r24
 bb4:	88 27       	eor	r24, r24
 bb6:	98 5f       	subi	r25, 0xF8	; 248
 bb8:	f7 cf       	rjmp	.-18     	; 0xba8 <__fp_trunc+0xe>
 bba:	86 95       	lsr	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	b1 1d       	adc	r27, r1
 bc2:	93 95       	inc	r25
 bc4:	96 39       	cpi	r25, 0x96	; 150
 bc6:	c8 f3       	brcs	.-14     	; 0xbba <__fp_trunc+0x20>
 bc8:	08 95       	ret

00000bca <__fp_zero>:
 bca:	e8 94       	clt

00000bcc <__fp_szero>:
 bcc:	bb 27       	eor	r27, r27
 bce:	66 27       	eor	r22, r22
 bd0:	77 27       	eor	r23, r23
 bd2:	cb 01       	movw	r24, r22
 bd4:	97 f9       	bld	r25, 7
 bd6:	08 95       	ret

00000bd8 <_exit>:
 bd8:	f8 94       	cli

00000bda <__stop_program>:
 bda:	ff cf       	rjmp	.-2      	; 0xbda <__stop_program>
